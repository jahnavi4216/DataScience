# -*- coding: utf-8 -*-
"""Kmeans

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M2y4jkr4QqchMQiEUa6UPq5Ybdkz6ASq
"""

# Header output
header = '''
|=====================================================================|
| Class:       Data 51100 Summer 2023                                 |                                       
| Title:       Week 2 Assignment                                      |
| Instructor:  Dr. Sam Abuomar                                        |
| Description: k-Means Clustering                                     |
|=====================================================================|
'''
print(header)

# Read txt file
input_file = "C:\Users\jahna\Downloads\prog2-input-data.txt"
data = [float(x.rstrip()) for x in open(input_file)]

# Ask for desired number of clusters
k = int(input("Enter number of clusters: "))

# Pick initial centroids
centroids = data[0:k]

# Initialize clusters dictionary
clusters = dict(zip(range(k), [[] for i in range(k)]))

# Initialize empty old_centroids dictionary
old_centroids = {}

# Assign data points to a cluster
def assign_to_clusters():
    for i in range(len(data)):
        item = data[i]
        distances = []
        for m in range(len(centroids)):
            centroid = centroids[m]
            distance = abs(centroid - item)
            distances.append(distance)
        min_distance = min(distances)
        min_distance_index = distances.index(min_distance)
        clusters[min_distance_index].append(item)

# Calculate and assign new centroids
def assign_centroids():
    for i in clusters:
        centroids[i] = sum(clusters[i]) / len(clusters[i])

# Print clusters and their content
def print_clusters():
    for i in clusters:
        print("%d %s" % (i, clusters[i]))
    print("")

# Print each point and the cluster it belongs to
def print_points():
    for cluster, points in clusters.items():
        for point in points:
            print(f"Point {point} in cluster {cluster}")
            output_file.write(f"Point {point} in cluster {cluster}\n")

# Counter that keeps track of iterations
iterations = 1
output_file = open('prog2-output-data.txt', 'w+')

# Keep iterating, recalculating centroids,
# and re-assigning data points to corresponding clusters,
# until current centroids match old centroids
while old_centroids != centroids:
    old_centroids = centroids.copy()
    clusters = dict(zip(range(k), [[] for i in range(k)]))
    assign_to_clusters()
    centroids = [0] * k
    assign_centroids()
    print("Iteration", iterations)
    print_clusters()
    iterations += 1
print_points()
output_file.close()

